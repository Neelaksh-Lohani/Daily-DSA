class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> seen; // value -> index
        for (int i = 0; i < nums.size(); ++i) {
            int complement = target - nums[i];
            if (seen.count(complement)) {
                return {seen[complement], i};
            }
            seen[nums[i]] = i;
        }
        return {}; // No pair found
    }
};

// TWO POINTERS TECHNIQUE

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        for(int i = 0; i<nums.size(); ++i){
            for(int j = i+1; j<nums.size(); ++j){   // USE J FROM I+1 TO AVOID DUPLICATE CHECKS 
                if(nums[i]+nums[j]==target) return {i,j};
            }
        }
        return {};
    }
};
